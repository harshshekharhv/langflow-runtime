{"id":"ac89c27a-1019-44e6-a6b2-58e7744d7ea4","data":{"nodes":[{"id":"SeldonCore-wBvtJ","type":"genericNode","position":{"x":-270.20799942958973,"y":-73.75995192831942},"data":{"type":"SeldonCore","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\nfrom typing import Dict, Optional, Union\n\nfrom langchain.llms.base import BaseLLM\nfrom langflow import CustomComponent\n\nfrom custom_components.custom_langchain_components.seldon_wrapper import DEFAULT_CONFIG, VALID_TASKS, SeldonCore\n\n\nclass SeldonCoreComponent(CustomComponent):\n    display_name: str = \"Seldon Core\"\n    name: str = \"SeldonCore\"\n    description: str = \"For LLMs deployed in Seldon Core namespace\"\n    beta = True\n    field_config = {\n        \"code\": {\n            \"show\": False\n        },\n        \"endpoint_url\": {\n            \"display_name\": \"Endpoint URL\",\n            \"value\": \"http://0.0.0.0:9000\",\n        },\n        \"repo_id\": {\n            \"display_name\": \"Model name\",\n            \"value\": \"llama2\",\n        },\n        \"task\": {\n            \"display_name\": \"Task\",\n            \"options\": VALID_TASKS,\n            \"value\": VALID_TASKS[1],\n        },\n        \"model_kwargs\": {\n            \"display_name\": \"Config\",\n            \"field_type\": \"code\",\n            \"multiline\": True,\n            # \"advanced\": False,\n            \"info\": \"Model kwargs for inference time\",\n            \"value\": json.dumps(DEFAULT_CONFIG, indent=4)\n        },\n    }\n\n    def build(\n        self,\n        endpoint_url: str,\n        repo_id: str,\n        task: str,\n        model_kwargs: Optional[Dict] = None,\n    ) -> Union[SeldonCore, BaseLLM]:\n        llm = SeldonCore(\n            repo_id=repo_id,\n            endpoint_url=endpoint_url,\n            task=task,\n            model_kwargs=model_kwargs,\n        )\n        return llm\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"endpoint_url":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"http://seldon-mesh.genai.sc.eng.hitachivantara.com","fileTypes":[],"file_path":"","password":false,"name":"endpoint_url","display_name":"Endpoint URL","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"code","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{\n    \"top_k\": 0,\n    \"top_p\": 0.15,\n    \"temperature\": 0.1,\n    \"repetition_penalty\": 1.1,\n    \"max_new_tokens\": 4000\n}","fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Config","advanced":false,"dynamic":false,"info":"Model kwargs for inference time","title_case":true},"repo_id":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"llama2-13b-chat-gpu","fileTypes":[],"file_path":"","password":false,"name":"repo_id","display_name":"Model name","advanced":false,"dynamic":false,"info":"","title_case":true},"task":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"text2text-generation","fileTypes":[],"file_path":"","password":false,"options":["text-generation","text2text-generation","summarization","question-answering"],"name":"task","display_name":"Task","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"For LLMs deployed in Seldon Core namespace","base_classes":["BaseLLM","LLM","SeldonCore","Embeddings","BaseLanguageModel","BaseLLM","BaseLanguageModel"],"display_name":"Seldon Core","documentation":"","custom_fields":{"endpoint_url":null,"repo_id":null,"task":null,"model_kwargs":null},"output_types":["SeldonCore","BaseLLM"],"field_formatters":{},"beta":true},"id":"SeldonCore-wBvtJ"},"selected":false,"width":384,"height":642,"dragging":false,"positionAbsolute":{"x":-270.20799942958973,"y":-73.75995192831942}},{"id":"ConversationBufferWindowMemory-LbpEx","type":"genericNode","position":{"x":261.87255964571045,"y":-78.39757778626684},"data":{"type":"ConversationBufferWindowMemory","node":{"template":{"chat_memory":{"type":"BaseChatMessageHistory","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"chat_memory","advanced":false,"dynamic":false,"info":"","title_case":true},"ai_prefix":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"AI","fileTypes":[],"password":false,"name":"ai_prefix","advanced":false,"dynamic":false,"info":"","title_case":true},"human_prefix":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"Human","fileTypes":[],"password":false,"name":"human_prefix","advanced":false,"dynamic":false,"info":"","title_case":true},"input_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"input_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Input when more than one variable is available.","title_case":true},"k":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":10,"fileTypes":[],"password":false,"name":"k","display_name":"Memory Size","advanced":false,"dynamic":false,"info":"","title_case":true},"memory_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"chat_history","fileTypes":[],"password":false,"name":"memory_key","advanced":false,"dynamic":false,"info":"","title_case":true},"output_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"output_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)","title_case":true},"return_messages":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"return_messages","advanced":false,"dynamic":false,"info":"","title_case":true,"value":true},"_type":"ConversationBufferWindowMemory"},"description":"Buffer for storing conversation memory inside a limited size window.","base_classes":["BaseMemory","ConversationBufferWindowMemory","BaseChatMemory"],"display_name":"ConversationBufferWindowMemory","documentation":"https://python.langchain.com/docs/modules/memory/how_to/buffer_window","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"ConversationBufferWindowMemory-LbpEx"},"selected":false,"width":384,"height":704,"positionAbsolute":{"x":261.87255964571045,"y":-78.39757778626684},"dragging":false},{"id":"DpnSqlAgentIntializer-pLLFl","type":"genericNode","position":{"x":1070.3314565009382,"y":9.52496603143365},"data":{"type":"DpnSqlAgentIntializer","node":{"template":{"llm":{"type":"BaseLLM","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"llm","advanced":false,"dynamic":false,"info":"","title_case":true},"memory":{"type":"BaseMemory","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"memory","display_name":"Memory","advanced":false,"dynamic":false,"info":"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.","title_case":true},"tools":{"type":"BaseTool","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"tools","advanced":false,"dynamic":false,"info":"Tools to be used by the agent.","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.agents import AgentExecutor, create_structured_chat_agent\n#from langchain_wrapper import SeldonCore\nfrom langchain.chains.conversation.memory import ConversationBufferWindowMemory\nfrom langflow import CustomComponent\nfrom langchain.tools import BaseTool\n\nfrom custom_components.custom_langchain_components.dpn_bucket_tool import sys_msg, human_msg, ListDpnBucketContentTool, SqlTool\nfrom langchain.llms import BaseLLM\nimport langchain.hub as hub\nfrom typing import Union, Optional, Sequence, List\nfrom langflow.field_typing import BaseLanguageModel, BaseMemory, Chain\n# special tokens used by llama 2 chat\n\nclass CustomAgentComponent(CustomComponent):\n    display_name: str = \"DPN Agent Initializer\"\n    description: str = \"Create any custom component you want!\"\n\n    def build_config(self):\n        return {\n                \"llm\": { \"required\": True },\n                \"memory\": {\n                        \"display_name\": \"Memory\",\n                        \"info\": \"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.\",\n                },\n                \"tools\": {\n                        \"required\": True,\n                        \"info\": \"Tools to be used by the agent.\"\n                }\n            }\n\n\n    def build(self, \n          llm: BaseLLM,\n          tools: List[BaseTool],\n          memory: Optional[BaseMemory] = None,\n        ) -> Union[AgentExecutor, None] :\n        \n        # tools = [ListDpnBucketContentTool(), SqlTool()]\n        \n        prompt = hub.pull(\"coty/react-chat-json-v1\")\n        print(f\"Prompt:\\n {prompt}\\n\")\n\n        prompt.messages[0].prompt.template = sys_msg\n        prompt.messages[1].prompt.template = human_msg\n        # conversational_memory = ConversationBufferWindowMemory(\n        #         memory_key='history',\n        #         k=5,\n        #         return_messages=True,\n        #         # input_key=\"input\"\n        # )\n\n        agent = create_structured_chat_agent(llm, tools, prompt=prompt)\n\n        executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True, memory=memory)\n        executor.input_keys.append('chat_history')\n        return executor","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Create any custom component you want!","base_classes":["Chain","AgentExecutor","NoneType"],"display_name":"DPN Agent Initializer","documentation":"","custom_fields":{"llm":null,"tools":null,"memory":null},"output_types":["AgentExecutor","NoneType"],"field_formatters":{},"beta":true},"id":"DpnSqlAgentIntializer-pLLFl","description":"Create any custom component you want!","display_name":"DPN Agent Initializer"},"selected":false,"width":384,"height":424,"dragging":false,"positionAbsolute":{"x":1070.3314565009382,"y":9.52496603143365}},{"id":"S3Bucket-rVqUs","type":"genericNode","position":{"x":655.3992453857229,"y":-218.90412459031862},"data":{"type":"S3Bucket","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"\nfrom langflow import CustomComponent\nfrom langchain.tools import BaseTool\n# from langchain.llms.base import BaseLLM\n# from langchain.tools.sql_database.tool import (\n#             # InfoSQLDatabaseTool,\n#             # ListSQLDatabaseTool,\n#             # QuerySQLCheckerTool,\n#             QuerySQLDataBaseTool,\n#         )\nfrom custom_components.custom_langchain_components.dpn_bucket_tool import ListDpnBucketContentTool\nfrom typing import Dict, Optional, Union\n\nclass CustomSQLTool(CustomComponent):\n    display_name: str = \"DPN S3 Tool\"\n    description: str = \"DPN S3 tool to get the list of items under the given bucket.\"\n    beta = True\n    \n    def build_config(self):\n        return { \n            # \"bucketName\":{\n            #     \"required\": True,\n            #     \"value\": \"Get all tenants from chargebacktenant only 10 records\"\n            #     },\n            # \"llm\":{\n            #     \"required\": True\n            #     },\n            # \"DB_URI\":{\n            #     \"required\": True,\n            #     \"value\": \"dpn+flightsql://dpn-engine-grpc.genai.sc.eng.hitachivantara.com:80\"\n            #     },\n            # \"token\":{\n            #     \"required\": True,\n            #     \"value\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJERUZBVUxUX05PTl9BVVRIRU5USUNBVEVEX1VTRVJfSUQiLCJleHAiOjE3MTI5NzgwOTN9.2rfCH3PdPIxjAVwkvIAi8Vmu4IK5FllPi452St53yWU\"\n                # }\n            }\n\n    def build(self) -> Union[BaseTool, ListDpnBucketContentTool]:\n        bucketTool = ListDpnBucketContentTool()\n        # return sqlTool._run(query=query)\n        # return sqlTool._run(query=query, llm=llm, DB_URI=DB_URI, token=token)\n        return bucketTool\n    # def build(self, query: str, llm: BaseLLM, DB_URI: str, token: str) -> str:\n    #     sqlTool = SqlTool(query=query, llm=llm, DB_URI=DB_URI, token=token)\n    #     # return sqlTool._run(query=query)\n    #     return sqlTool._run(query=query, llm=llm, DB_URI=DB_URI, token=token)\n    #     # return sqlTool\n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"DPN S3 tool to get the list of items under the given bucket.","base_classes":["BaseTool","BaseTool","ListDpnBucketContentTool"],"display_name":"DPN S3 Tool","documentation":"","custom_fields":{},"output_types":["BaseTool","ListDpnBucketContentTool"],"field_formatters":{},"beta":true},"id":"S3Bucket-rVqUs"},"selected":false,"width":384,"height":300,"positionAbsolute":{"x":655.3992453857229,"y":-218.90412459031862},"dragging":false},{"id":"SQLTool-XuLwm","type":"genericNode","position":{"x":702.13487199274,"y":375.0827560119944},"data":{"type":"SQLTool","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"\nfrom langflow import CustomComponent\nfrom langchain.tools import BaseTool\nfrom langchain.llms.base import BaseLLM\nfrom langchain.tools.sql_database.tool import (\n            # InfoSQLDatabaseTool,\n            # ListSQLDatabaseTool,\n            # QuerySQLCheckerTool,\n            QuerySQLDataBaseTool,\n        )\nfrom custom_components.custom_langchain_components.dpn_bucket_tool import SqlTool\nfrom typing import Dict, Optional, Union\n\nclass CustomSQLTool(CustomComponent):\n    display_name: str = \"DPN SQL Tool\"\n    description: str = \"DPN SQL tool to query DPN database.\"\n    beta = True\n    \n    def build_config(self):\n        return { \n            # \"query\":{\n            #     \"required\": True,\n            #     \"value\": \"Get all tenants from chargebacktenant only 10 records\"\n            #     },\n            # \"llm\":{\n            #     \"required\": True\n            #     },\n            # \"DB_URI\":{\n            #     \"required\": True,\n            #     \"value\": \"dpn+flightsql://dpn-engine-grpc.genai.sc.eng.hitachivantara.com:80\"\n            #     },\n            # \"token\":{\n            #     \"required\": True,\n            #     \"value\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJERUZBVUxUX05PTl9BVVRIRU5USUNBVEVEX1VTRVJfSUQiLCJleHAiOjE3MTI5NzgwOTN9.2rfCH3PdPIxjAVwkvIAi8Vmu4IK5FllPi452St53yWU\"\n                # }\n            }\n\n    def build(self) -> Union[BaseTool, SqlTool]:\n        sqlTool = SqlTool()\n        # return sqlTool._run(query=query)\n        # return sqlTool._run(query=query, llm=llm, DB_URI=DB_URI, token=token)\n        return sqlTool\n    # def build(self, query: str, llm: BaseLLM, DB_URI: str, token: str) -> str:\n    #     sqlTool = SqlTool(query=query, llm=llm, DB_URI=DB_URI, token=token)\n    #     # return sqlTool._run(query=query)\n    #     return sqlTool._run(query=query, llm=llm, DB_URI=DB_URI, token=token)\n    #     # return sqlTool\n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"DPN SQL tool to query DPN database.","base_classes":["BaseTool","BaseTool","SqlTool"],"display_name":"DPN SQL Tool","documentation":"","custom_fields":{},"output_types":["BaseTool","SqlTool"],"field_formatters":{},"beta":true},"id":"SQLTool-XuLwm"},"selected":false,"width":384,"height":280,"positionAbsolute":{"x":702.13487199274,"y":375.0827560119944},"dragging":false}],"edges":[{"source":"SQLTool-XuLwm","sourceHandle":"{œbaseClassesœ:[œBaseToolœ,œBaseToolœ,œSqlToolœ],œdataTypeœ:œSQLToolœ,œidœ:œSQLTool-XuLwmœ}","target":"DpnSqlAgentIntializer-pLLFl","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseToolœ}","data":{"targetHandle":{"fieldName":"tools","id":"DpnSqlAgentIntializer-pLLFl","inputTypes":null,"type":"BaseTool"},"sourceHandle":{"baseClasses":["BaseTool","BaseTool","SqlTool"],"dataType":"SQLTool","id":"SQLTool-XuLwm"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-SQLTool-XuLwm{œbaseClassesœ:[œBaseToolœ,œBaseToolœ,œSqlToolœ],œdataTypeœ:œSQLToolœ,œidœ:œSQLTool-XuLwmœ}-DpnSqlAgentIntializer-pLLFl{œfieldNameœ:œtoolsœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseToolœ}"},{"source":"S3Bucket-rVqUs","sourceHandle":"{œbaseClassesœ:[œBaseToolœ,œBaseToolœ,œListDpnBucketContentToolœ],œdataTypeœ:œS3Bucketœ,œidœ:œS3Bucket-rVqUsœ}","target":"DpnSqlAgentIntializer-pLLFl","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseToolœ}","data":{"targetHandle":{"fieldName":"tools","id":"DpnSqlAgentIntializer-pLLFl","inputTypes":null,"type":"BaseTool"},"sourceHandle":{"baseClasses":["BaseTool","BaseTool","ListDpnBucketContentTool"],"dataType":"S3Bucket","id":"S3Bucket-rVqUs"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-S3Bucket-rVqUs{œbaseClassesœ:[œBaseToolœ,œBaseToolœ,œListDpnBucketContentToolœ],œdataTypeœ:œS3Bucketœ,œidœ:œS3Bucket-rVqUsœ}-DpnSqlAgentIntializer-pLLFl{œfieldNameœ:œtoolsœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseToolœ}"},{"source":"SeldonCore-wBvtJ","sourceHandle":"{œbaseClassesœ:[œBaseLLMœ,œLLMœ,œSeldonCoreœ,œEmbeddingsœ,œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œSeldonCoreœ,œidœ:œSeldonCore-wBvtJœ}","target":"DpnSqlAgentIntializer-pLLFl","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}","data":{"targetHandle":{"fieldName":"llm","id":"DpnSqlAgentIntializer-pLLFl","inputTypes":null,"type":"BaseLLM"},"sourceHandle":{"baseClasses":["BaseLLM","LLM","SeldonCore","Embeddings","BaseLanguageModel","BaseLLM","BaseLanguageModel"],"dataType":"SeldonCore","id":"SeldonCore-wBvtJ"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-SeldonCore-wBvtJ{œbaseClassesœ:[œBaseLLMœ,œLLMœ,œSeldonCoreœ,œEmbeddingsœ,œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œSeldonCoreœ,œidœ:œSeldonCore-wBvtJœ}-DpnSqlAgentIntializer-pLLFl{œfieldNameœ:œllmœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}"},{"source":"ConversationBufferWindowMemory-LbpEx","sourceHandle":"{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferWindowMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-LbpExœ}","target":"DpnSqlAgentIntializer-pLLFl","targetHandle":"{œfieldNameœ:œmemoryœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}","data":{"targetHandle":{"fieldName":"memory","id":"DpnSqlAgentIntializer-pLLFl","inputTypes":null,"type":"BaseMemory"},"sourceHandle":{"baseClasses":["BaseMemory","ConversationBufferWindowMemory","BaseChatMemory"],"dataType":"ConversationBufferWindowMemory","id":"ConversationBufferWindowMemory-LbpEx"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-ConversationBufferWindowMemory-LbpEx{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferWindowMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-LbpExœ}-DpnSqlAgentIntializer-pLLFl{œfieldNameœ:œmemoryœ,œidœ:œDpnSqlAgentIntializer-pLLFlœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"}],"viewport":{"x":508.7667953836632,"y":-30.389087937226122,"zoom":0.641712948781453}},"description":"Navigate the Linguistic Landscape, Discover Opportunities.","name":"DPN SQL flow","last_tested_version":"0.6.10","is_component":false}